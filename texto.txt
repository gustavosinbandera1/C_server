we have comlinkA,holocronA,userInterfaceA and comlinkB,holocronB,userInterfaceB

the controller is connected to comlink through websocket API, 
at this moment the controller is a web socket client,and need to log dfata every configured time to comlinkA server
comlinkA need to get this information from controller and process many things and send alarm notifications to holocrom 
if is there any, 

for instance the path could be controller (websocket client) sending data to comlinkA every 5 minutes
comlinkA need to get the data and process some alarms and some realtime data information, and send notification to holocronA throught web API
the comunication in this case b/w holocromA and UIA is by realtime web events streaming, all is automatically
the controller is sending data without any request





 "ws-protocols": [{
       "lws-meta": {
         "status": "ok"
       },
       "dumb-increment-protocol": {
         "status": "ok"
       },
       "lws-mirror-protocol": {
         "status": "ok"
       },
       "lws-status": {
         "status": "ok"
       },

       "protocol-post-demo": {
         "status": "ok"
       },
        "protocol-lws-packet":{
          "status":"ok"
        },
       "lws-server-status": {
         "status": "ok",
         "update-ms": "5000"
       },
         "example-standalone-protocol": {
          "status": "ok"
        },
        "lws-minimal":{
           "status": "ok"
        }
     }]











"mounts": [{
       "mountpoint": "/",
       "origin": "file://_lws_ddir_/libwebsockets-test-server",
       "default": "test.html",
       "cache-max-age": "60",
       "cache-reuse": "1",
       "cache-revalidate": "1",
       "cache-intermediaries": "0"
       }, {
        "mountpoint": "/server-status",
        "origin": "file://_lws_ddir_/libwebsockets-test-server/server-status",
        "default": "server-status.html"
        }, {
        "mountpoint": "/testcgi",
        #"origin": "cgi://_lws_ddir_/libwebsockets-test-server/lws-cgi-test.sh"
         "origin": "cgi://_lws_ddir_/libwebsockets-test-server/lws-cgi-test.sh"

       }, {
        "mountpoint": "/formtest",
        "origin": "callback://protocol-post-demo"
       },
       {
           "mountpoint": "/formtest2",
           "origin": "callback://protocol-lws-packet"
        }
        ]



///////////////////////////////////////////////////////////////////











{
 "vhosts": [ {
     "name": "localhost",
     "port": "7681",
# by default, bind to all interfaces, but you can restrict it
#     "interface": "lo",
#     "host-ssl-key":  "/etc/pki/tls/private/libwebsockets.org.key",
#     "host-ssl-cert": "/etc/pki/tls/certs/libwebsockets.org.crt",
#     "host-ssl-ca":   "/etc/pki/tls/certs/libwebsockets.org.cer",
     "access-log": "/var/log/lwsws/test-access-log",
     "sts": "on",
     "mounts": [{
       "mountpoint": "/",
       "origin": "file://_lws_ddir_/libwebsockets-test-server",
       "default": "test.html",
       "cache-max-age": "60",
       "cache-reuse": "1",
       "cache-revalidate": "1",
       "cache-intermediaries": "0"
       }, {
        "mountpoint": "/server-status",
        "origin": "file://_lws_ddir_/libwebsockets-test-server/server-status",
        "default": "server-status.html"
        }, {
        "mountpoint": "/testcgi",
        #"origin": "cgi://_lws_ddir_/libwebsockets-test-server/lws-cgi-test.sh"
         "origin": "cgi://_lws_ddir_/libwebsockets-test-server/lws-cgi-test.sh"

       }, {
        "mountpoint": "/formtest",
        "origin": "callback://protocol-post-demo"
       },
       {
           "mountpoint": "/formtest2",
           "origin": "callback://protocol-lws-packet"
        }
        ],
     # which protocols are enabled for this vhost, and optional
     # vhost-specific config options for the protocol
     #


        "ws-protocols": [{
       "lws-meta": {
         "status": "ok"
       },
       "dumb-increment-protocol": {
         "status": "ok"
       },
       "lws-mirror-protocol": {
         "status": "ok"
       },
       "lws-status": {
         "status": "ok"
       },

       "protocol-post-demo": {
         "status": "ok"
       },
        "protocol-lws-packet":{
          "status":"ok"
        },
       "lws-server-status": {
         "status": "ok",
         "update-ms": "5000"
       },
         "example-standalone-protocol": {
          "status": "ok"
        },
        "lws-minimal":{
           "status": "ok"
        }
     }]
    }
  ]
}

